<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>poetry on Claudio Jolowicz</title>
    <link>https://cjolowicz.github.io/tags/poetry/</link>
    <description>Recent content in poetry on Claudio Jolowicz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2020 17:41:00 +0200</lastBuildDate>
    
	<atom:link href="https://cjolowicz.github.io/tags/poetry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hypermodern Python Chapter 6: CI/CD</title>
      <link>https://cjolowicz.github.io/posts/hypermodern-python-06-ci-cd/</link>
      <pubDate>Wed, 05 Feb 2020 17:41:00 +0200</pubDate>
      
      <guid>https://cjolowicz.github.io/posts/hypermodern-python-06-ci-cd/</guid>
      <description>Read this article on Medium
  In this sixth and last installment of the Hypermodern Python series, I&amp;rsquo;m going to discuss how to add continuous integration and delivery to your project using GitHub Actions, Poetry, and Nox.1 In the previous chapter, we discussed how to add documentation. (If you start reading here, you can also download the code for the previous chapter.)
Here are the topics covered in this chapter on Continuous Integration and Delivery:</description>
    </item>
    
    <item>
      <title>Hypermodern Python Chapter 2: Testing</title>
      <link>https://cjolowicz.github.io/posts/hypermodern-python-02-testing/</link>
      <pubDate>Wed, 08 Jan 2020 06:28:21 +0100</pubDate>
      
      <guid>https://cjolowicz.github.io/posts/hypermodern-python-02-testing/</guid>
      <description>Read this article on Medium
  In this second installment of the Hypermodern Python series, I&amp;rsquo;m going to discuss how to add automated testing to your project, and how to teach the random fact generator foreign languages.1 Previously, we discussed How to set up a Python project. (If you start reading here, you can also download the code for the previous chapter.)
Here are the topics covered in this chapter on Testing in Python:</description>
    </item>
    
    <item>
      <title>Hypermodern Python</title>
      <link>https://cjolowicz.github.io/posts/hypermodern-python-01-setup/</link>
      <pubDate>Wed, 01 Jan 2020 08:00:00 +0200</pubDate>
      
      <guid>https://cjolowicz.github.io/posts/hypermodern-python-01-setup/</guid>
      <description>Read this article on Medium
  New Year 2020 marks the end of more than a decade of coexistence of Python 2 and 3. The Python landscape has changed considerably over this period: a host of new tools and best practices now improve the Python developer experience. Their adoption, however, lags behind due to the constraints of legacy support.
This article series is a guide to modern Python tooling with a focus on simplicity and minimalism.</description>
    </item>
    
  </channel>
</rss>